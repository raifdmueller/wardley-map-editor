var documents = [

{
    "id": 0,
    "uri": "arc42/02_architecture_constraints.html",
    "menu": "arc42",
    "title": "2. Randbedingungen",
    "text": " Table of Contents 2. Randbedingungen 2.1 Technische Randbedingungen 2.2 Organisatorische Randbedingungen 2.3 Konventionen 2.4 Wardley Map Spezifische Constraints 2.5 Offene technische Entscheidungen 2. Randbedingungen Randbedingungen und Vorgaben, die ihre Freiheiten bezüglich Entwurf, Implementierung oder Ihres Entwicklungsprozesses einschränken. 2.1 Technische Randbedingungen Randbedingung Beschreibung Begründung Browser-Support Moderne Browser (Chrome 90+, Firefox 88+, Safari 14+, Edge 90+) ES6+ Features, Canvas/SVG APIs needed Legacy browser support würde zu viel Zeit kosten Client-Side Only Keine Server-Komponente, Backend, Datenbank Zeitbudget: 1 Stunde - kein Setup von Server-Infrastruktur möglich Vanilla JavaScript Keine Frameworks (React, Vue, Angular) Zeitbudget: 1 Stunde - kein Build-Setup, direktes HTML/JS draw.io Kompatibilität XML-Export muss draw.io-Format entsprechen Demo-Ziel: Integration in bestehende Tools zeigen 2.2 Organisatorische Randbedingungen Randbedingung Beschreibung Begründung Entwicklungszeit ~1 Stunde Live-Stream für MVP Stream-Format - feste Sendezeit, experimenteller Charakter Open Source MIT License, GitHub Repository Community-Projekt, Bildungszweck, Nachnutzung erwünscht Keine externen Dependencies Keine npm packages, CDNs, Build-Tools Zeitbudget: 1 Stunde - kein Setup von Build-Pipeline möglich Live-Entwicklung Transparenter, ungeschönter Entwicklungsprozess Stream-Ziel: Echte AI-Human Collaboration zeigen 2.3 Konventionen Bereich Konvention Dokumentation arc42 Template mit AsciiDoc docToolchain für Generierung Code Style ES6+ Standards Kommentare in Englisch Versionierung Git Flow, semantische Versionierung GitHub Issues für Features Diagramme PlantUML für Architektur-Diagramme 2.4 Wardley Map Spezifische Constraints Constraint Beschreibung Koordinatensystem X-Achse: Evolution (Genesis → Commodity) Y-Achse: Value Chain (High → Low) Werte: 0-1 normalisiert Komponenten-Typen Standard Wardley Map Elemente: - Components (Rechtecke) - Dependencies (Linien) - Annotations (Text) draw.io Mapping Wardley Koordinaten → draw.io Pixel-Koordinaten Erhaltung der relationalen Positionen 2.5 Offene technische Entscheidungen Die folgenden technischen Entscheidungen werden als Architecture Decision Records (ADRs) dokumentiert: Canvas vs. SVG für Rendering → ADR-001 (geplant) LocalStorage vs. InMemory für Persistierung → ADR-002 (geplant) Mouse-Only vs. Touch-Support → ADR-003 (geplant) "
},

{
    "id": 1,
    "uri": "arc42/01_introduction_and_goals.html",
    "menu": "arc42",
    "title": "1. Einführung und Ziele",
    "text": " Table of Contents 1. Einführung und Ziele 1.1 Aufgabenstellung 1.2 Qualitätsziele 1.3 Stakeholder 1. Einführung und Ziele Beschreibt die wesentlichen Anforderungen und treibenden Kräfte, die bei der Umsetzung der Softwarearchitektur und Entwicklung des Systems berücksichtigt werden müssen. 1.1 Aufgabenstellung Was ist der Wardley Map Editor? Ein web-basierter Editor zur visuellen Erstellung von Wardley Maps mit Export-Funktionalität zu draw.io. KRITISCHE FRAGE: Warum brauchen wir das? Existierende Tools: * Online Wardley Maps - bereits verfügbar * Verschiedene draw.io Templates * Text-basierte Tools Was macht unseren Editor einzigartig? Wesentliche Features (MVP für Demo) Basis-Canvas Wardley Map Koordinatensystem (Evolution/Value-Achsen) Einfache Komponenten-Platzierung Minimaler Export JSON-Export der Map-Daten Grundlegende draw.io XML-Generierung Live-Demo tauglich Funktioniert im Browser Visuell ansprechend für Stream 1.2 Qualitätsziele Die drei (!) wichtigsten Qualitätsziele für die Architektur. Maximal fünf Ziele sollten hier genannt werden. Priorität Qualitätsziel Szenario/Messbarkeit 1 Demo-Fähigkeit Funktionierender Prototyp präsentierbar in 1 Stunde Live-Stream 2 Verständlichkeit Zuschauer können den Architektur-Ansatz nachvollziehen und diskutieren 3 Lernwert Demonstration von Human-AI Collaboration in der praktischen Architekturarbeit Demo-Fokus: Diese Qualitätsziele spiegeln den experimentellen Charakter der Live-Session wider. Das Ziel ist nicht ein produktionsreifes System, sondern ein funktionierender Demonstrator für Architektur-Methoden. 1.3 Stakeholder Überblick über die Stakeholder des Systems, d.h. alle Personen, Rollen oder Organisationen, die * das System kennen sollten oder * von der Architektur überzeugt werden müssen oder * mit dem System oder seiner Entwicklung zu tun haben. Rolle Kontakt Erwartungen Stream-Zuschauer Software Architektur im Stream Community Lernen, wie AI-assistierte Architektur funktioniert Wardley Map Praktiker Simon Wardley Community Einfaches Tool für Map-Erstellung Enterprise Architects Unternehmen mit draw.io-Infrastruktur Integration in bestehende Tool-Landschaft Entwickler-Team Ralf + Claude (AI) Demonstrieren von Human-AI Collaboration REALITÄTS-CHECK: Haben wir tatsächlich mit echten Wardley Map-Nutzern gesprochen? Oder entwickeln wir \"ins Blaue hinein\"? "
},

{
    "id": 2,
    "uri": "arc42/arc42.html",
    "menu": "arc42",
    "title": "Architecture Documentation: Wardley Map Editor",
    "text": " Table of Contents Architecture Documentation: Wardley Map Editor 1. Einführung und Ziele 1.1 Aufgabenstellung Was ist der Wardley Map Editor? Wesentliche Features (MVP für Demo) 1.2 Qualitätsziele 1.3 Stakeholder 2. Randbedingungen 2.1 Technische Randbedingungen 2.2 Organisatorische Randbedingungen 2.3 Konventionen 2.4 Wardley Map Spezifische Constraints 2.5 Offene technische Entscheidungen 3. Kontextabgrenzung 3.1 Fachlicher Kontext 3.2 Technischer Kontext 3.3 Externe Schnittstellen draw.io XML Format Browser LocalStorage Architecture Documentation: Wardley Map Editor Ralf D. Müller &lt; ralf.d.mueller@gmail.com &gt; :doctype: book :toc: left :toclevels: 3 :sectnum: :sectanchors: :sectnums: :source-highlighter: highlight.js :icons: font :imagesdir: images 1. Einführung und Ziele Beschreibt die wesentlichen Anforderungen und treibenden Kräfte, die bei der Umsetzung der Softwarearchitektur und Entwicklung des Systems berücksichtigt werden müssen. 1.1 Aufgabenstellung Was ist der Wardley Map Editor? Ein web-basierter Editor zur visuellen Erstellung von Wardley Maps mit Export-Funktionalität zu draw.io. KRITISCHE FRAGE: Warum brauchen wir das? Existierende Tools: * Online Wardley Maps - bereits verfügbar * Verschiedene draw.io Templates * Text-basierte Tools Was macht unseren Editor einzigartig? Wesentliche Features (MVP für Demo) Basis-Canvas Wardley Map Koordinatensystem (Evolution/Value-Achsen) Einfache Komponenten-Platzierung Minimaler Export JSON-Export der Map-Daten Grundlegende draw.io XML-Generierung Live-Demo tauglich Funktioniert im Browser Visuell ansprechend für Stream 1.2 Qualitätsziele Die drei (!) wichtigsten Qualitätsziele für die Architektur. Maximal fünf Ziele sollten hier genannt werden. Priorität Qualitätsziel Szenario/Messbarkeit 1 Demo-Fähigkeit Funktionierender Prototyp präsentierbar in 1 Stunde Live-Stream 2 Verständlichkeit Zuschauer können den Architektur-Ansatz nachvollziehen und diskutieren 3 Lernwert Demonstration von Human-AI Collaboration in der praktischen Architekturarbeit Demo-Fokus: Diese Qualitätsziele spiegeln den experimentellen Charakter der Live-Session wider. Das Ziel ist nicht ein produktionsreifes System, sondern ein funktionierender Demonstrator für Architektur-Methoden. 1.3 Stakeholder Überblick über die Stakeholder des Systems, d.h. alle Personen, Rollen oder Organisationen, die * das System kennen sollten oder * von der Architektur überzeugt werden müssen oder * mit dem System oder seiner Entwicklung zu tun haben. Rolle Kontakt Erwartungen Stream-Zuschauer Software Architektur im Stream Community Lernen, wie AI-assistierte Architektur funktioniert Wardley Map Praktiker Simon Wardley Community Einfaches Tool für Map-Erstellung Enterprise Architects Unternehmen mit draw.io-Infrastruktur Integration in bestehende Tool-Landschaft Entwickler-Team Ralf + Claude (AI) Demonstrieren von Human-AI Collaboration REALITÄTS-CHECK: Haben wir tatsächlich mit echten Wardley Map-Nutzern gesprochen? Oder entwickeln wir \"ins Blaue hinein\"? 2. Randbedingungen Randbedingungen und Vorgaben, die ihre Freiheiten bezüglich Entwurf, Implementierung oder Ihres Entwicklungsprozesses einschränken. 2.1 Technische Randbedingungen Randbedingung Beschreibung Begründung Browser-Support Moderne Browser (Chrome 90+, Firefox 88+, Safari 14+, Edge 90+) ES6+ Features, Canvas/SVG APIs needed Legacy browser support würde zu viel Zeit kosten Client-Side Only Keine Server-Komponente, Backend, Datenbank Zeitbudget: 1 Stunde - kein Setup von Server-Infrastruktur möglich Vanilla JavaScript Keine Frameworks (React, Vue, Angular) Zeitbudget: 1 Stunde - kein Build-Setup, direktes HTML/JS draw.io Kompatibilität XML-Export muss draw.io-Format entsprechen Demo-Ziel: Integration in bestehende Tools zeigen 2.2 Organisatorische Randbedingungen Randbedingung Beschreibung Begründung Entwicklungszeit ~1 Stunde Live-Stream für MVP Stream-Format - feste Sendezeit, experimenteller Charakter Open Source MIT License, GitHub Repository Community-Projekt, Bildungszweck, Nachnutzung erwünscht Keine externen Dependencies Keine npm packages, CDNs, Build-Tools Zeitbudget: 1 Stunde - kein Setup von Build-Pipeline möglich Live-Entwicklung Transparenter, ungeschönter Entwicklungsprozess Stream-Ziel: Echte AI-Human Collaboration zeigen 2.3 Konventionen Bereich Konvention Dokumentation arc42 Template mit AsciiDoc docToolchain für Generierung Code Style ES6+ Standards Kommentare in Englisch Versionierung Git Flow, semantische Versionierung GitHub Issues für Features Diagramme PlantUML für Architektur-Diagramme 2.4 Wardley Map Spezifische Constraints Constraint Beschreibung Koordinatensystem X-Achse: Evolution (Genesis → Commodity) Y-Achse: Value Chain (High → Low) Werte: 0-1 normalisiert Komponenten-Typen Standard Wardley Map Elemente: - Components (Rechtecke) - Dependencies (Linien) - Annotations (Text) draw.io Mapping Wardley Koordinaten → draw.io Pixel-Koordinaten Erhaltung der relationalen Positionen 2.5 Offene technische Entscheidungen Die folgenden technischen Entscheidungen werden als Architecture Decision Records (ADRs) dokumentiert: Canvas vs. SVG für Rendering → ADR-001 (geplant) LocalStorage vs. InMemory für Persistierung → ADR-002 (geplant) Mouse-Only vs. Touch-Support → ADR-003 (geplant) 3. Kontextabgrenzung Die Kontextabgrenzung grenzt das System gegen alle Kommunikationspartner (Nachbarsysteme und Benutzerrollen) ab. Sie legt damit die externen Schnittstellen fest. 3.1 Fachlicher Kontext Kommunikationspartner: Partner Input Output Map Creator (User) Mouse/Keyboard-Interaktionen Drag &amp; Drop, Clicks, Text-Input Visuelle Wardley Map draw.io XML-Datei (Download) draw.io XML-Import der generierten Datei Editierbare Diagramme Web Browser HTML/CSS/JavaScript-Ausführung LocalStorage-Zugriff Gerenderte Benutzeroberfläche Abgrenzung - Was unser System NICHT macht: * Kein Import von existierenden Maps * Keine Kollaboration/Multi-User * Keine Cloud-Synchronisation * Keine Versionierung 3.2 Technischer Kontext Technische Schnittstellen: Interface Protokoll/Format Input Output Canvas/SVG Rendering Browser Canvas/SVG API Map Data (JSON) Visual Representation LocalStorage Web Storage API Map Objects (JSON) Persistent Storage (Browser-lokal) File Download Browser Download API draw.io XML .drawio File (Download) Mouse/Touch Events DOM Events User Interactions Component Positions/Updates Technische Abgrenzung: * Kein Server-Backend * Keine REST APIs * Keine WebSocket-Verbindungen * Keine externe Cloud-Services 3.3 Externe Schnittstellen draw.io XML Format Zweck: Export von Wardley Maps als editierbare draw.io-Diagramme Format Spezifikation: &lt;mxGraphModel dx=\"1422\" dy=\"794\" grid=\"1\" gridSize=\"10\"&gt; &lt;root&gt; &lt;mxCell id=\"0\"/&gt; &lt;mxCell id=\"1\" parent=\"0\"/&gt; &lt;!-- Wardley Map Components --&gt; &lt;mxCell id=\"component1\" value=\"User Needs\" style=\"rounded=0;whiteSpace=wrap;html=1;\" vertex=\"1\" parent=\"1\"&gt; &lt;mxGeometry x=\"100\" y=\"50\" width=\"120\" height=\"60\" as=\"geometry\"/&gt; &lt;/mxCell&gt; &lt;!-- Dependencies --&gt; &lt;mxCell id=\"edge1\" style=\"edgeStyle=orthogonalEdgeStyle;\" edge=\"1\" parent=\"1\" source=\"component1\" target=\"component2\"&gt; &lt;/mxCell&gt; &lt;/root&gt; &lt;/mxGraphModel&gt; Koordinaten-Mapping: - Wardley X (0-1) → draw.io X (0-1200px) - Wardley Y (0-1) → draw.io Y (0-800px) Browser LocalStorage Zweck: Lokale Persistierung der Map-Daten (nur Browser-lokal) Datenformat: { \"mapId\": \"uuid-v4\", \"title\": \"My Wardley Map\", \"components\": [ { \"id\": \"comp1\", \"label\": \"User Needs\", \"x\": 0.2, \"y\": 0.9, \"evolution\": \"genesis\" } ], \"dependencies\": [ { \"from\": \"comp1\", \"to\": \"comp2\" } ], \"lastModified\": \"2025-06-13T11:18:00Z\" } Unresolved directive in &lt;stdin&gt; - include::04_solution_strategy.adoc[] Unresolved directive in &lt;stdin&gt; - include::05_building_block_view.adoc[] Unresolved directive in &lt;stdin&gt; - include::06_runtime_view.adoc[] Unresolved directive in &lt;stdin&gt; - include::07_deployment_view.adoc[] Unresolved directive in &lt;stdin&gt; - include::08_concepts.adoc[] Unresolved directive in &lt;stdin&gt; - include::09_architecture_decisions.adoc[] Unresolved directive in &lt;stdin&gt; - include::10_quality_requirements.adoc[] Unresolved directive in &lt;stdin&gt; - include::11_risks_and_technical_debt.adoc[] Unresolved directive in &lt;stdin&gt; - include::12_glossary.adoc[] "
},

{
    "id": 3,
    "uri": "arc42/03_system_scope_and_context.html",
    "menu": "arc42",
    "title": "3. Kontextabgrenzung",
    "text": " Table of Contents 3. Kontextabgrenzung 3.1 Fachlicher Kontext 3.2 Technischer Kontext 3.3 Externe Schnittstellen 3. Kontextabgrenzung Die Kontextabgrenzung grenzt das System gegen alle Kommunikationspartner (Nachbarsysteme und Benutzerrollen) ab. Sie legt damit die externen Schnittstellen fest. 3.1 Fachlicher Kontext Kommunikationspartner: Partner Input Output Map Creator (User) Mouse/Keyboard-Interaktionen Drag &amp; Drop, Clicks, Text-Input Visuelle Wardley Map draw.io XML-Datei (Download) draw.io XML-Import der generierten Datei Editierbare Diagramme Web Browser HTML/CSS/JavaScript-Ausführung LocalStorage-Zugriff Gerenderte Benutzeroberfläche Abgrenzung - Was unser System NICHT macht: * Kein Import von existierenden Maps * Keine Kollaboration/Multi-User * Keine Cloud-Synchronisation * Keine Versionierung 3.2 Technischer Kontext Technische Schnittstellen: Interface Protokoll/Format Input Output Canvas/SVG Rendering Browser Canvas/SVG API Map Data (JSON) Visual Representation LocalStorage Web Storage API Map Objects (JSON) Persistent Storage (Browser-lokal) File Download Browser Download API draw.io XML .drawio File (Download) Mouse/Touch Events DOM Events User Interactions Component Positions/Updates Technische Abgrenzung: * Kein Server-Backend * Keine REST APIs * Keine WebSocket-Verbindungen * Keine externe Cloud-Services 3.3 Externe Schnittstellen draw.io XML Format Zweck: Export von Wardley Maps als editierbare draw.io-Diagramme Format Spezifikation: &lt;mxGraphModel dx=\"1422\" dy=\"794\" grid=\"1\" gridSize=\"10\"&gt; &lt;root&gt; &lt;mxCell id=\"0\"/&gt; &lt;mxCell id=\"1\" parent=\"0\"/&gt; &lt;!-- Wardley Map Components --&gt; &lt;mxCell id=\"component1\" value=\"User Needs\" style=\"rounded=0;whiteSpace=wrap;html=1;\" vertex=\"1\" parent=\"1\"&gt; &lt;mxGeometry x=\"100\" y=\"50\" width=\"120\" height=\"60\" as=\"geometry\"/&gt; &lt;/mxCell&gt; &lt;!-- Dependencies --&gt; &lt;mxCell id=\"edge1\" style=\"edgeStyle=orthogonalEdgeStyle;\" edge=\"1\" parent=\"1\" source=\"component1\" target=\"component2\"&gt; &lt;/mxCell&gt; &lt;/root&gt; &lt;/mxGraphModel&gt; Koordinaten-Mapping: - Wardley X (0-1) → draw.io X (0-1200px) - Wardley Y (0-1) → draw.io Y (0-800px) Browser LocalStorage Zweck: Lokale Persistierung der Map-Daten (nur Browser-lokal) Datenformat: { \"mapId\": \"uuid-v4\", \"title\": \"My Wardley Map\", \"components\": [ { \"id\": \"comp1\", \"label\": \"User Needs\", \"x\": 0.2, \"y\": 0.9, \"evolution\": \"genesis\" } ], \"dependencies\": [ { \"from\": \"comp1\", \"to\": \"comp2\" } ], \"lastModified\": \"2025-06-13T11:18:00Z\" } "
},

{
    "id": 4,
    "uri": "search.html",
    "menu": "-",
    "title": "search",
    "text": " Search Results "
},

{
    "id": 5,
    "uri": "lunrjsindex.html",
    "menu": "-",
    "title": "null",
    "text": " will be replaced by the index "
},

];
